An implementation of the card game called war

Classes: 

Card, Deck, User, Table, App




Methods and fields:

Card:
- static suits = [..]
- static names = [..]

- value
- name
- suit
+ compare(otherCard)
+ printself()
+ getNameValue()


Deck:
- cards = [all 52 cards]
+ shuffleDeck()
+ getSize()
+ getTopCard()
+ removeTopCard()
+ printCards()

User:
- name
- hand = [] - gets card from taken
- taken = [] - its separate array because they are faced up 
- flag = True - when false the game is finished and winner is decided
+ turn() - calls fixCards() first and then if flag is true returns a card
+ fixCards() - if self len(cards) calls resign() if len(hand) = 0 puts to it all from taken
+ giveCard() - returns a card from a list with the pop() method
+ resign() - changes flag to false
+ receiveCard(card)
+ shuffleTaken()
+ takenToHand() pushes all cards from taken to hand and clears taken else jumps to winScreen
+ printHand() - only prints each card in hand of player
+ printTaken() - only prints each card in taken of player
+ printNumCards()
+ returnNumCards()

Table:
- deck
- p1
- p2
- playzone = []
+ deckDeals() - deck gives all cards to players' taken, should be empty at the end
+ winnerSituation(player) - should be used after decision of winning card is made, awards the current player with the cards in playzone
+ checkWinningCard(card1, card2) - when we need to compare cards, goes to war conditions make so
+ turn() - if each player has cards it gives one from each, else declares a winner(jumps to winScreen)
+ war() - gives 2 cards from each player and then does a turn()
+ declareWinner() - meant to help with end game and going to winScreen and keeping count of statistics

